{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"14630636751281871977","abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proof","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"is_even","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"pdfbbuIwEAbgd8k1F56xx4e+ympVpRCqSFFAKVRaob77GvgHwkqOWHw1A+l8OM6M1ZyaTfdx/Hzvx+3uq3n7dWo+pn4Y+s/3YbduD/1uzN+eflaNfnw/TF2Xv2pm13PVvp268dC8jcdhWDXf7XC8/NHXvh0v8dBO+apZNd24yTGD237oztnP6l5tyqVWPIqd8bdyeaynpXrWeprVx4d6LtczxwSAreGSYMsCkdclEEV5ZQ2BdBM4WFMSZGENIVhdQ0jFu/BlITkBkHLR/9eT4dsuGC+v3EMy+iQocfEeFnpJTAAgLhV7yVQ2Ey10I/uos8A+2SKx0Axk79tgufgoyFY+y8V9SPG2D/LSPjzX0eSrW5pCdU8urqK+KW+ngze21JQL9T4R6sP8YT7W89IJSQpYpjtAzwNOH4Sdr+B5wFndQzefiX8AV3vIS/Upz77+mJfqqeBYPRWcKk+HJeDJsVq8jeqxCuE2FvNtyGPxO39q1/308J9Ow6Z5ywtiuga+Bpt//xwdouRl5x9lfx6bHANiREzXaA0iITKiRXSIggjPwrPwLDwHz8Fz8Bw8B8/Bc/AcPAfPwRN4Ak/gCTyBJ/AEnsATeALPw/PwPDwPz8Pz8Dw8D8/D8/ACvAAvwAvwArwAL8AL8AK8AC/Ci/AivAgvwovwIrwIL8KL8BK8BC/BS/ASvAQvwUvwErwEj4zRhDRhTawmThPRxGsSNImaqEwqk8qkMqlMKpPKpDKpTCqTyqwyq8wqs8qsMqt8GZ3zIf/dTn37MXR4z9gex/XstePwZ69X9MVkP+3W3eY4defBvVzLo/wX","file_map":{"50":{"source":"use poseidon::poseidon2;\nmod merkle_tree;\nfn main(\n    //public inputs\n    root: pub Field,\n    nullifier_hash: pub Field,\n    recipient: pub Field,\n    //private inputs\n    nullifier: Field,\n    secret: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n) {\n    //compute the commitment Poseideon(nullifier,secret)\n    let commitment: Field = poseidon2::Poseidon2::hash([nullifier, secret], 2);\n    //check that the nullifier matches the nullifier hash\n    let computed_nullifier_hash: Field = poseidon2::Poseidon2::hash([nullifier], 1);\n    assert(computed_nullifier_hash == nullifier_hash);\n    //check that the commitment is in the merkle tree\n    let computed_root: Field = merkle_tree::compute_merkle_root(commitment, merkle_proof, is_even);\n    assert(root == computed_root);\n    let recipient_binding = recipient * recipient;\n    assert(recipient_binding == recipient * recipient);\n}\n","path":"/Users/mani/Developer/noir/zk-mixer/circuits/src/main.nr"},"51":{"source":"use poseidon;\npub fn compute_merkle_root(leaf: Field, merkel_proof: [Field; 20], is_even: [bool; 20]) -> Field {\n    //temporary variable to store the hash for the current level we are working on\n    let mut hash: Field = leaf;\n    //increment through levels\n    for i in 0..20 {\n        let (left, right) = if is_even[i] {\n            (hash, merkel_proof[i])\n        } else {\n            (merkel_proof[i], hash)\n        };\n        hash = poseidon::poseidon2::Poseidon2::hash([left, right], 2);\n    }\n    hash\n}\n","path":"/Users/mani/Developer/noir/zk-mixer/circuits/src/merkle_tree.nr"},"58":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/mani/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}